/**
 * Class controler and action battle Hero.
 */ 
public class GameOfThrons 
{
      public boolean createHeroPage{get; set;}
	  public HeroHome__c createNewHero{get; set;} 
      public List<HeroHome__c> heroList{get; set;}
      public List<WrapBattle> wrapList {get;set;}
      public List<HeroGameOfThrons> listHeroEndBattle{get;set;}
      public List<HeroHome__c> choice;
      public String random{get;set;}
    
    	/**
    	 *wraper class choice hero in battle
		*/
        public Class WrapBattle
        {
            public boolean checkValue {get;set;}
            public HeroHome__c heroBattle {get;set;}
            
            WrapBattle(HeroHome__c heroBattle, boolean chek)
                {
                   this.heroBattle= heroBattle;
                   checkValue = chek;
                }
        }

     /**
      * Build class and fill Wrap Class
      */
  public GameOfThrons()
          {
              updatePage();
              random=String.valueOf(randomMethod(4));// for gif random on page
          }
    /**
     *TODO:transport in ControlerPage
     *Method is update page from Database
     */
	public void updatePage()
        {
             heroList= new List<HeroHome__c>([SELECT nameHero__c,hpHero__c,minDamadge__c,maxDamadge__c,
                                              expHero__c,lvlHero__c,deadTime__c,undeadHero__c
                                              FROM HeroHome__c]);
            createNewHero= new HeroHome__c();
            fillWrap();
        }
    /**
     *TODO:transport in ControlerPage
     *save Hero in DB from Page
     */
    public void  saveCreateHero()
        {
            if( createHeroPage==true){
                    if((createNewHero.nameHero__c<>null)&&(createNewHero.hpHero__c<>null)){
                      insert createNewHero;  
                    }
             createHeroPage=false; 
             updatePage();      
                    
             }else{       
                createHeroPage=true;
               }
          }
    /**
     * public random method
     */
    public static Integer randomMethod(Integer upperLimit){
        Integer rand = Math.round(Math.random()*10);
        return Math.mod(rand, upperLimit);
    }
        
    /**
     *TODO:transport in ControlerPage
     *Method is cancel create Hero 
     */
    public void cancelSave()
        {
            createHeroPage=false;
        }
    /**
     *TODO:transport in ControlerPage
     *Method is fill Wrap Class 
     */
        private void fillWrap()
            {
            wrapList = new List<WrapBattle>();
                for(HeroHome__c indxHero:heroList){
                    wrapList.add(new WrapBattle(indxHero, false));
                }
            }
       
        /** 
         *TODO:transport in ControlerPage
         *Method is choice Hero in battle 
         */
        public void choiceHeroInBattle()
            {
                choice = new List<HeroHome__c>();
                for(Integer i = 0; i < wrapList.size(); i++){
                        if (wrapList[i].checkValue){
                            if (choice.size()<2){
                                choice.add(wrapList[i].heroBattle);
                            }else {wrapList[i].checkValue=false;}// uncheck more Hero
                          }        
                    }
                if(choice.size()==2){// chek on Null or allone hero    
                     fight(new  HeroGameOfThrons(choice[0]),new HeroGameOfThrons(choice[1])); 
                }
            }
    /**
     *TODO:transport in ControlerPage
     *Method is delete Hero from DB
     *
     */  
    public void deleteHero()
        {
            choice = new List<HeroHome__c>();
            for(Integer i = 0; i < wrapList.size(); i++){
                        if (wrapList[i].checkValue){
                             choice.add(wrapList[i].heroBattle);
                          }        
                    }
            delete choice;
            updatePage();
        }
    
	 /**
	  * Main method is in the battle
	  */
 public  void fight( HeroGameOfThrons  hero01, HeroGameOfThrons hero02)
        {  //for check hero hp
             Integer damadgeHero01;
             Integer damadgeHero02;
           // fight
          while(hero01.hpHero >0 && hero02.hpHero> 0){
              damadgeHero01=hero01.kickDamadge();
              damadgeHero02=hero02.kickDamadge();
              //check hero hp and kick
              if(hero01.hpHero>damadgeHero02){//check if hpHero01<0,endBatle
                  hero01.hpHero-=damadgeHero02;
                      if(hero02.hpHero>damadgeHero01){//check hpHero02 on <0
                        hero02.hpHero-=damadgeHero01;
                        }else{
                            hero02.hpHero=0;
                            hero02.totalDamadge-=damadgeHero02;
                        }
                }else{
                    hero01.hpHero=0;
                    hero01.totalDamadge-=damadgeHero01;
                }
          }// end while
            // define who is win or die
      	if (hero01.hpHero>hero02.hpHero){
                hero01.winHero(hero02);
                hero02.dieHero();
           			} else {
                             if (hero01.hpHero<hero02.hpHero){
                                    hero02.winHero(hero01);
                                    hero01.dieHero();
                             		} else { 
                                     hero01.dieHero(); 
                                     hero02.dieHero();
                               }
          } 
            // Update used hero in database
            hero01.updateHero(choice[0]);
            hero02.updateHero(choice[1]);
            // to pass rezult batle on the page 
            listHeroEndBattle= new List<HeroGameOfThrons>();
            listHeroEndBattle.add(hero01);
            listHeroEndBattle.add(hero02);
            updatePage();
      }
}