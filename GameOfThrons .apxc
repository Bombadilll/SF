public class GameOfThrons {
      public boolean createHeroPage{get; set;}
	  public HeroHome__c createNewHero{get; set;} 
      public List<HeroHome__c> heroList{get; set;}
      public List<WrapBattle> wrapList {get;set;}
      public List<HeroGameOfThrons> listHeroEndBattle{get;set;}
      public List<HeroHome__c> choice;
    
    	//**wraper class choice hero in battle
        public Class WrapBattle{
        public boolean checkValue {get;set;}
        public HeroHome__c heroBattle {get;set;}
            WrapBattle(HeroHome__c heroBattle, boolean chek){
                          this.heroBattle= heroBattle;
                            checkValue = chek;
      	  }
        }

     //**Build class and fill Wrap Class
      public GameOfThrons(){
          updatePage();
		 }
    //**Method is update page from Database
    public void updatePage(){
         heroList= new List<HeroHome__c>([SELECT nameHero__c,hpHero__c,
                                     minDamadge__c,maxDamadge__c,expHero__c,lvlHero__c FROM HeroHome__c]);
        createNewHero= new HeroHome__c();
        fillWrap();
    }
    // save Hero in DB from Page
    public void  saveCreateHero(){
        if( createHeroPage==true){
       			upsert createNewHero;
           		createHeroPage=false; 
                updatePage();
       	 }else{       
          	createHeroPage=true;
           }
      }
    public void cancelSave(){
        createHeroPage=false;
    }
    //Method is fill Wrap Class
        private void fillWrap(){
        wrapList = new List<WrapBattle>();
            for(HeroHome__c indxHero:heroList){
                wrapList.add(new WrapBattle(indxHero, false));
            }
        }
   
        //Method is choice Hero in battle
        public void choiceHeroInBattle(){
            choice = new List<HeroHome__c>();
            for(Integer i = 0; i < wrapList.size(); i++){
                    if (wrapList[i].checkValue){
                        if (choice.size()<2){
                            choice.add(wrapList[i].heroBattle);
                        }else {wrapList[i].checkValue=false;}// uncheck more Hero
                      }        
                }
            if(choice.size()==2){// chek on Null or allone hero    
       			 fight(new  HeroGameOfThrons(choice[0]),new HeroGameOfThrons(choice[1])); 
            }
   		}
    // Method is delete Hero from DB
    public void deleteHero(){
        choice = new List<HeroHome__c>();
        for(Integer i = 0; i < wrapList.size(); i++){
                    if (wrapList[i].checkValue){
                         choice.add(wrapList[i].heroBattle);
                      }        
                }
        delete choice;
        updatePage();
    }
    
	 //Main method is in the battle
    public  void fight( HeroGameOfThrons  hero01, HeroGameOfThrons hero02){
    	 Integer damadgeHero01;
         Integer damadgeHero02;
   	  while(hero01.hpHero >0 && hero02.hpHero> 0){
          damadgeHero01=hero01.kickDamadge();
          damadgeHero02=hero02.kickDamadge();
          
          if(hero01.hpHero>damadgeHero02){//check if hpHero01<0,endBatle
              hero01.hpHero-=damadgeHero02;
                  if(hero02.hpHero>damadgeHero01){//check hpHero02 on <0
                    hero02.hpHero-=damadgeHero01;
                    }else{
                        hero02.hpHero=0;
                        hero02.totalDamadge-=damadgeHero02;
                    }
          	}else{
                hero01.hpHero=0;
                hero01.totalDamadge-=damadgeHero01;
            }
          
              
        }
        if (hero01.hpHero>hero02.hpHero){
        	hero01.winHero(hero02);
            hero02.dieHero();
       			 } else {
                    	 if (hero01.hpHero<hero02.hpHero){
        						hero02.winHero(hero01);
           					    hero01.dieHero();
                         } else { 
                             hero01.dieHero(); 
                             hero02.dieHero();
                           }
           	} 
        // Update used hero in database
        hero01.updateHero(choice[0]);
        hero02.updateHero(choice[1]);
        // to pass rezult batle on the page 
        listHeroEndBattle= new List<HeroGameOfThrons>();
        listHeroEndBattle.add(hero01);
       	listHeroEndBattle.add(hero02);
  }
}